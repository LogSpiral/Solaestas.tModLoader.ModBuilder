using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using static Solaestas.tModLoader.ModBuilder.Generators.Descriptors;

namespace Solaestas.tModLoader.ModBuilder.Generators;

[Generator]
public class PathGenerator : ISourceGenerator
{
	public void Execute(GeneratorExecutionContext context)
	{
		var enabled = context.GetProperty("EnablePathGenerator", "true");
		if (enabled != "true")
		{
			return;
		}

		StringBuilder source = new();
		source.AppendLine("// <auto-generated/>");
		source.AppendLine("""
			using Microsoft.Xna.Framework.Graphics;
			using ReLogic.Content;
			using Terraria.ModLoader;
			""");

		var modName = context.Compilation.Assembly.Name;
		var typename = context.GetProperty("PathTypeName", "ModAsset");
		var rootNamespace = context.GetProperty("PathNamespace", modName);
		var prefix = context.GetProperty("PathPrefix", string.Empty);
		if (prefix.Length > 0 && prefix[^1] != '/')
		{
			prefix += '/';
		}

		source.AppendLine($$"""
			namespace {{rootNamespace}};

			public static class {{typename}}
			{
				private static AssetRepository _repo;
				static {{typename}}()
				{
					_repo = ModLoader.GetMod("{{modName}}").Assets;
				}
			""");

		Dictionary<string, AdditionalText> paths = [];
		foreach (var file in context.AdditionalFiles)
		{
			string pack = context.GetMetadata(file, "Pack", "false");
			if (!bool.TryParse(pack, out var shouldPack) || !shouldPack)
			{
				continue;
			}

			if (!context.TryGetMetadata(file, "ModPath", out var modPath))
			{
				continue;
			}

			var filename = Path.GetFileNameWithoutExtension(modPath);
			var dirname = Path.GetFileName(Path.GetDirectoryName(modPath));
			if (char.IsDigit(filename[0]))
			{
				filename = $"{dirname}_{filename}";
			}
			for (int i = 0; i < filename.Length; i++)
			{
				var ch = filename[i];
				if (char.IsLetter(ch) || char.IsDigit(ch) || ch == '_')
				{
					continue;
				}
				context.ReportDiagnostic(Diagnostic.Create(
					MB0002,
					Location.Create(file.Path, default, default),
					[file.Path]));
				goto Continue;
			}

			if (paths.TryGetValue(filename, out var origin))
			{
				context.ReportDiagnostic(Diagnostic.Create(
					MB0001,
					Location.Create(file.Path, default, default),
					[file.Path, origin.Path]));
				goto Continue;
			}

			var ext = Path.GetExtension(modPath);
			string? assetType = ext switch
			{
				".fx" => "Effect",
				".png" => "Texture2D",
				_ => null,
			};

			if (assetType != null)
			{
				source.AppendLine($$"""
					public static Asset<{{assetType}}> {{filename}} => _repo.Request<{{assetType}}>({{filename}}Path, AssetRequestMode.ImmediateLoad);
				""");
				modPath = modPath[..^ext.Length];
			}
			source.AppendLine($$"""
					public const string {{filename}}Path = "{{prefix}}{{modPath}}";
				""");

		Continue:
			;
		}

		source.AppendLine("}");
		context.AddSource($"{typename}.g.cs", source.ToString());
	}

	public void Initialize(GeneratorInitializationContext context)
	{
	}
}